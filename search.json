[
  {
    "objectID": "sc_integrating.html",
    "href": "sc_integrating.html",
    "title": "sc_integration",
    "section": "",
    "text": "if (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nif (!require(\"pacman\", quietly = TRUE))\n    BiocManager::install(\"pacman\")\np_load(\"SingleCellExperiment\")\np_load(\"Seurat\")\np_load(\"hdf5r\")\np_load(\"DropletUtils\")\np_load(\"dplyr\")\np_load(\"scater\")\np_load(\"Matrix\")\np_load(\"scran\")\np_load(\"ggplot2\")\np_load(\"igraph\")\np_load(\"SingleR\")\np_load(\"celldex\")\np_load(\"iSEE\")\np_load(\"Nebulosa\")\np_load(\"UpSetR\")\np_load(\"clustree\")\np_load(\"Rmagic\")\np_load(\"SeuratWrappers\")\n#p_load(\"harmony\")\n\nif (!require(\"devtools\"))\ninstall.packages(\"devtools\")\nif(!require(\"findPC\"))\ndevtools::install_github(\"haotian-zhuang/findPC\")\nif(!require(\"SeuratWrappers\"))\nremotes::install_github('satijalab/seurat-wrappers')"
  },
  {
    "objectID": "sc_integrating.html#data-integration",
    "href": "sc_integrating.html#data-integration",
    "title": "sc_integration",
    "section": "Data Integration",
    "text": "Data Integration\n\nPre-process\n\nif(!file.exists(\"pbmc_1k_v2_filtered_feature_bc_matrix.tar.gz\")){\nsystem(\"wget -q https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_v2/pbmc_1k_v2_filtered_feature_bc_matrix.tar.gz && tar xzvf pbmc_1k_v2_filtered_feature_bc_matrix.tar.gz && mkdir -p chem2 && mv filtered_feature_bc_matrix chem2\")}\nif(!file.exists(\"pbmc_1k_v3_filtered_feature_bc_matrix.tar.gz\")){\nsystem(\"wget -q https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_v3/pbmc_1k_v3_filtered_feature_bc_matrix.tar.gz && tar xzvf pbmc_1k_v3_filtered_feature_bc_matrix.tar.gz && mkdir -p chem3 && mv filtered_feature_bc_matrix chem3\")}\n\n\nmat<-Seurat::Read10X(data.dir = \"chem2/filtered_feature_bc_matrix/\")\nchem2<- CreateSeuratObject(counts = mat, project = \"chem2\", min.cells = 0, min.features =0)\nmat<-Seurat::Read10X(data.dir =  \"chem3/filtered_feature_bc_matrix/\")\nchem3<- CreateSeuratObject(counts = mat, project = \"chem3\", min.cells = 0, min.features =0)\n\n\nchem2[[\"Mitochondrial\"]] <- PercentageFeatureSet(chem2, pattern = \"^MT-\")\nqc.lib2 <- scater::isOutlier(chem2$nCount_RNA, log=TRUE, type=\"lower\",nmads=3) #sce_data$sum\nqc.nexprs2 <- isOutlier(chem2$nFeature_RNA, log=TRUE,nmads=3, type=\"lower\") #sce_data$detected\nqc.mito2 <- isOutlier(chem2$Mitochondrial ,nmads=3,type=\"higher\") #sce_data$subsets_Mitochondrial_percent\ndiscard2 <- qc.lib2 | qc.nexprs2  | qc.mito2\nchem2$discard<-discard2\nchem2<-subset(chem2,subset= discard!=TRUE)\n\nchem3[[\"Mitochondrial\"]] <- PercentageFeatureSet(chem3, pattern = \"^MT-\")\nqc.lib2 <- scater::isOutlier(chem3$nCount_RNA, log=TRUE, type=\"lower\",nmads=3) #sce_data$sum\nqc.nexprs2 <- isOutlier(chem3$nFeature_RNA, log=TRUE,nmads=3, type=\"lower\") #sce_data$detected\nqc.mito2 <- isOutlier(chem3$Mitochondrial ,nmads=3,type=\"higher\") #sce_data$subsets_Mitochondrial_percent\ndiscard2 <- qc.lib2 | qc.nexprs2  | qc.mito2\nchem3$discard<-discard2\nchem3<-subset(chem3,subset= discard!=TRUE)\n\n\n\nJoin Cells\n\nseurat_data_merged<-merge(chem2,chem3,add.cell.ids = c(\"V2\", \"V3\"), project = \"merged\")\nseurat_data_merged <- NormalizeData(seurat_data_merged, normalization.method = \"LogNormalize\", scale.factor = 10000, verbose=F)\nseurat_data_merged <- FindVariableFeatures(seurat_data_merged, assay=\"RNA\",selection.method = \"vst\", nfeatures = 2000, verbose=F)\nseurat_data_merged <- ScaleData(seurat_data_merged, features = rownames(seurat_data_merged))\n\nCentering and scaling data matrix\n\nseurat_data_merged <- RunPCA(seurat_data_merged,\n                      features = VariableFeatures(object = seurat_data_merged),\n                      verbose = F,npcs = 50)\nseurat_data_merged <- RunUMAP(seurat_data_merged,reduction = \"pca\",verbose = F,dims = 1:11)\n\nWarning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric\nTo use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'\nThis message will be shown once per session\n\nDimPlot(seurat_data_merged, reduction = \"umap\",group.by = \"orig.ident\")\n\n\n\n\n\n\nIntegration Seurat\n\nseurat.list<-list(chem2,chem3)\n\nseurat.list <- lapply(X = seurat.list, FUN = function(x) {\n    x <- NormalizeData(x,verbose=F)\n    x <- FindVariableFeatures(x, selection.method = \"vst\", nfeatures = 2000,verbose=F)\n})\n\n# select features that are repeatedly variable across datasets for integration\nfeatures <- SelectIntegrationFeatures(object.list = seurat.list)\n\nhead(features)\n\n[1] \"GNLY\"   \"IGLC2\"  \"IGKC\"   \"GZMB\"   \"S100A8\" \"S100A9\"\n\nlength(features)\n\n[1] 2000\n\n\n\nanchors <- FindIntegrationAnchors(object.list = seurat.list, anchor.features = features,verbose = F)\nseurat_combined <- IntegrateData(anchorset = anchors)\n\nMerging dataset 1 into 2\n\n\nExtracting anchors for merged samples\n\n\nFinding integration vectors\n\n\nFinding integration vector weights\n\n\nIntegrating data\n\n\n\nseurat_combined <- ScaleData(seurat_combined, features = rownames(seurat_combined))\n\nCentering and scaling data matrix\n\nseurat_combined <- RunPCA(seurat_combined,\n                      features = VariableFeatures(object = seurat_combined),\n                      verbose = F,npcs = 50)\nseurat_combined <- RunUMAP(seurat_combined,reduction = \"pca\",verbose = F,dims = 1:11)\nseurat_combined <- FindNeighbors(seurat_combined, reduction = \"pca\", dims = 1:30)\n\nComputing nearest neighbor graph\n\n\nComputing SNN\n\nseurat_combined <- FindClusters(seurat_combined, resolution = 0.5)\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 2005\nNumber of edges: 92431\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.9063\nNumber of communities: 11\nElapsed time: 0 seconds\n\nDimPlot(seurat_combined, reduction = \"umap\",group.by = \"orig.ident\")\n\n\n\n\n\nDimPlot(seurat_combined, reduction = \"umap\", split.by = \"orig.ident\")\n\n\n\n\n\nseurat_combined\n\nAn object of class Seurat \n35538 features across 2005 samples within 2 assays \nActive assay: integrated (2000 features, 2000 variable features)\n 1 other assay present: RNA\n 2 dimensional reductions calculated: pca, umap\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIntegrated values should not be used for marker identification. It is important, in case of Seurat Object, to set the default assay again as the normalized values.\n\n\n\n\nIntegration Harmony\n\nseurat_data_harmony<-harmony::RunHarmony(seurat_data_merged,group.by.vars = \"orig.ident\")\n\nHarmony 1/10\n\n\nHarmony 2/10\n\n\nHarmony 3/10\n\n\nHarmony 4/10\n\n\nHarmony converged after 4 iterations\n\n\nWarning: Invalid name supplied, making object name syntactically valid. New\nobject name is Seurat..ProjectDim.RNA.harmony; see ?make.names for more details\non syntax validity\n\nseurat_data_harmony <- RunUMAP(seurat_data_harmony,reduction = \"harmony\",verbose = F,dims = 1:11)\nDimPlot(seurat_data_harmony, reduction = \"umap\",group.by = \"orig.ident\")\n\n\n\n\n\n\nEvaluating integration\n\nseurat.list <- lapply(X = seurat.list, FUN = function(x) {\n    x<- ScaleData(x, features = rownames(x))\n    x <- RunPCA(x,features = VariableFeatures(object = x),\n                      verbose = F,npcs = 50)\n    x <- RunUMAP(x,reduction = \"pca\",verbose = F,dims = 1:11)\n    x <- FindNeighbors(x, reduction = \"pca\", dims = 1:30)\n    x <- FindClusters(x, resolution = 0.5)\n    x <- FindVariableFeatures(x, selection.method = \"vst\", nfeatures = 2000,verbose=F)\n})\n\nCentering and scaling data matrix\n\n\nComputing nearest neighbor graph\n\n\nComputing SNN\n\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 927\nNumber of edges: 45294\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8671\nNumber of communities: 7\nElapsed time: 0 seconds\n\n\nCentering and scaling data matrix\n\n\nComputing nearest neighbor graph\n\n\nComputing SNN\n\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 1078\nNumber of edges: 41871\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8839\nNumber of communities: 9\nElapsed time: 0 seconds\n\n\n\ntab<- data.frame(before=seurat.list[[1]]$seurat_clusters, after=seurat_combined[,colnames(seurat.list[[1]])][[]]$seurat_clusters) %>% table()\npheatmap::pheatmap(log2(tab+1), color=colorRampPalette(c(\"white\", \"blue\"))(101),cluster_rows = F,cluster_cols = F)\n\n\n\ntab<- data.frame(before=seurat.list[[2]]$seurat_clusters, after=seurat_combined[,colnames(seurat.list[[2]])][[]]$seurat_clusters) %>% table()\npheatmap::pheatmap(log2(tab+1), color=colorRampPalette(c(\"white\", \"blue\"))(101),cluster_rows = F,cluster_cols = F)\n\n\n\n\n\nDefaultAssay(seurat_combined) <- \"RNA\"\nIdents(seurat_combined) <- seurat_combined$seurat_clusters\n\nconserved.markers <- FindConservedMarkers(seurat_combined, ident.1 = 0, grouping.var = \"orig.ident\", verbose = FALSE)\n\nhead(conserved.markers)\n\n          chem2_p_val chem2_avg_log2FC chem2_pct.1 chem2_pct.2 chem2_p_val_adj\nS100A12 3.003171e-177         5.122899       0.988       0.044   1.007203e-172\nVCAN    1.115710e-165         3.402782       0.912       0.021   3.741867e-161\nCD14    1.741667e-113         2.201955       0.680       0.018   5.841202e-109\nMNDA    2.973783e-152         3.370733       0.932       0.065   9.973475e-148\nMS4A6A  1.950469e-149         2.957007       0.876       0.034   6.541484e-145\nS100A8  6.811264e-146         6.405144       1.000       0.216   2.284362e-141\n          chem3_p_val chem3_avg_log2FC chem3_pct.1 chem3_pct.2 chem3_p_val_adj\nS100A12 2.358008e-213         4.469216       0.987       0.025   7.908287e-209\nVCAN    7.530415e-206         3.974759       0.990       0.048   2.525551e-201\nCD14    2.686868e-202         2.871006       0.967       0.038   9.011218e-198\nMNDA    4.119775e-194         3.409500       1.000       0.083   1.381690e-189\nMS4A6A  4.972831e-194         2.830633       0.974       0.045   1.667788e-189\nS100A8  7.148624e-194         6.448778       1.000       0.108   2.397506e-189\n             max_pval minimump_p_val\nS100A12 3.003171e-177  4.716016e-213\nVCAN    1.115710e-165  1.506083e-205\nCD14    1.741667e-113  5.373736e-202\nMNDA    2.973783e-152  8.239549e-194\nMS4A6A  1.950469e-149  9.945662e-194\nS100A8  6.811264e-146  1.429725e-193"
  },
  {
    "objectID": "sc_integrating.html#differential-expression",
    "href": "sc_integrating.html#differential-expression",
    "title": "sc_integration",
    "section": "Differential Expression",
    "text": "Differential Expression\n\nseurat_combined$clust_orig.ident<- paste(seurat_combined$seurat_clusters,seurat_combined$orig.ident, sep = \"_\")\nIdents(seurat_combined) <- \"clust_orig.ident\"\ndfex_clust0<- FindMarkers(seurat_combined, ident.1 = \"0_chem2\", ident.2 = \"0_chem3\", verbose = FALSE,only.pos = F)\nhead(dfex_clust0, n = 15)\n\n               p_val avg_log2FC pct.1 pct.2    p_val_adj\nRPL21   3.961619e-91  1.5783971 1.000 1.000 1.328648e-86\nRPL7    1.727843e-90  1.9019795 1.000 0.997 5.794838e-86\nMT-ND1  8.752324e-90 -1.7221381 0.988 0.997 2.935355e-85\nRPL13A  1.078006e-89  2.1108584 1.000 0.987 3.615415e-85\nMT-ATP6 1.463502e-87 -1.5094426 0.996 0.997 4.908293e-83\nRPS27   9.397522e-86  1.2758131 1.000 1.000 3.151741e-81\nRPL27A  7.646383e-85  2.0900508 0.992 0.967 2.564444e-80\nTMSB4X  1.067049e-83  1.0082501 1.000 1.000 3.578668e-79\nRPL34   3.778420e-82  1.2388800 1.000 1.000 1.267207e-77\nRPS17   6.336518e-82  2.8078563 0.968 0.683 2.125142e-77\nRPLP2   1.131240e-81  1.4007701 1.000 0.993 3.793954e-77\nRPS15   1.567411e-80  1.2551856 1.000 1.000 5.256783e-76\nMT-CO3  6.279638e-80 -0.9356098 0.996 0.997 2.106065e-75\nRPL39   9.870788e-79  0.8841529 1.000 1.000 3.310465e-74\nMT-CO2  2.136420e-76 -0.8839316 1.000 0.997 7.165126e-72\n\nVlnPlot(seurat_combined, features = \"CRIP1\", split.plot = T,split.by = \"orig.ident\", group.by = \"seurat_clusters\",pt.size = 0.2)\n\nThe default behaviour of split.by has changed.\nSeparate violin plots are now plotted side-by-side.\nTo restore the old behaviour of a single split violin,\nset split.plot = TRUE.\n      \nThis message will be shown once per session.\n\n\n\n\n\n\nseurat_combined@assays$RNA@data[\"SUB1\",] %>% as_tibble(rownames = \"Cell\") %>% left_join(as_tibble(seurat_combined[[]], rownames=\"Cell\"), by=c(\"Cell\")) %>%\n  filter(seurat_clusters==0)%>%\n    ggplot(aes(x=seurat_clusters, y=value))+geom_violin(aes(fill=orig.ident),scale = \"width\", adjust=1)\n\n\n\n    #ggbeeswarm::geom_quasirandom(size=0.1)+\n  #theme(legend.position = \"none\")\n\nVlnPlot(seurat_combined, features = \"ISG15\", group.by = \"seurat_clusters\",pt.size = 0.2,fill.by = \"orig.ident\",)\n\n\n\n\n\nremotes::install_github(\"Oshlack/speckle\")\n\nSkipping install of 'speckle' from a github remote, the SHA1 (83df3e9e) has not changed since last install.\n  Use `force = TRUE` to force installation"
  },
  {
    "objectID": "sc_metacell.html",
    "href": "sc_metacell.html",
    "title": "SC_metacells",
    "section": "",
    "text": "Metacells\n\nsce_data<- DropletUtils::read10xCounts(\"10k_PBMC_3p_nextgem_Chromium_X_filtered_feature_bc_matrix.h5\",sample.names = \"pbmc\")\n\ndir.create(\"PBMC_metacell\", showWarnings = F)\nscdb_init(\"PBMC_metacell\", force_reinit=T)\nmat_metacell <- scm_import_sce_to_mat(Seurat::as.SingleCellExperiment(seurat_data))\nscdb_add_mat(\"PBMC\",mat_metacell)\nif(!dir.exists(\"figs_metacell\")) dir.create(\"figs_metacell/\")\nscfigs_init(\"figs_metacell/\")\n\n\ndim(mat_metacell@mat)\n\n\nmat_metacell@cell_metadata %>% head()\n\n\nig_genes <- c(grep(\"^IGJ\", mat_metacell@genes, v=T), \n                grep(\"^IGH\",mat_metacell@genes,v=T),\n                grep(\"^IGK\", mat_metacell@genes, v=T), \n                grep(\"^IGL\", mat_metacell@genes, v=T))\n\nbad_genes <- unique(c(grep(\"^MT-\", mat_metacell@genes, v=T), grep(\"^MTMR\", mat_metacell@genes, v=T), grep(\"^MTND\", mat_metacell@genes, v=T),\"NEAT1\",\"TMSB4X\", \"TMSB10\", ig_genes))\n\nmcell_mat_ignore_genes(new_mat_id=\"PBMC_clean\", mat_id=\"PBMC\", bad_genes, reverse=F)\nmcell_mat_ignore_small_cells(\"PBMC_clean_2\", \"PBMC_clean\", 800) #threshold for UMIs per cell\n\n\nmcell_add_gene_stat(gstat_id=\"PBMC_gstat\", mat_id=\"PBMC_clean_2\", force=T)\n\n\nmat2 = scdb_gstat(\"PBMC_gstat\")\nhead(mat2)\n\n\nmcell_gset_filter_varmean(gset_id=\"PBMC_gstat_Feats\", gstat_id=\"PBMC_gstat\", T_vm=0.08, force_new=T)\nmcell_gset_filter_cov(gset_id = \"PBMC_gstat_Feats\", gstat_id=\"PBMC_gstat\", T_tot=100, T_top3=2)\n\nThe first command creates a new gene set with all genes for which the scaled variance is 0.08 and higher. The second command restrict this gene set to genes with at least 100 UMIs across the entire dataset, and also requires selected genes to have at least three cells for more than 2 UMIs were recorded.\n\nmcell_plot_gstats(gstat_id=\"PBMC_gstat\", gset_id=\"PBMC_gstat_Feats\")\n\n\nmcell_add_cgraph_from_mat_bknn(mat_id=\"PBMC_clean_2\", \n                gset_id = \"PBMC_gstat_Feats\", \n                graph_id=\"PBMC_graph\",\n                K=100,\n                dsamp=T)\n\n\nmcell_coclust_from_graph_resamp(\n                coc_id=\"PBMC_coc500\", \n                graph_id=\"PBMC_graph\",\n                min_mc_size=20, \n                p_resamp=0.75, n_resamp=500)\n\n\nmcell_mc_from_coclust_balanced(\n                coc_id=\"PBMC_coc500\", \n                mat_id= \"PBMC_clean_2\",\n                mc_id= \"PBMC_mc\", \n                K=30, min_mc_size=30, alpha=2)\n\n\nmcell_mc_split_filt(new_mc_id=\"PBMC_mc_filtered\", \n            mc_id=\"PBMC_mc\", \n            mat_id=\"PBMC_clean_2\",\n            T_lfc=3, plot_mats=F)\n\n\nmcell_gset_from_mc_markers(gset_id=\"PBMC_markers\", mc_id=\"PBMC_mc_filtered\")\n\n\nmcell_mc_plot_marks(mc_id=\"PBMC_mc_filtered\", gset_id=\"PBMC_markers\", mat_id=\"PBMC_clean_2\")\n\n\nmc_colorize_default(\"PBMC_mc\")\n\nmcell_mc2d_force_knn(mc2d_id=\"PBMC_2dproj\",mc_id=\"PBMC_mc\",graph_id=\"PBMC_graph\")\n\ntgconfig::set_param(\"mcell_mc2d_height\",1000, \"metacell\")\ntgconfig::set_param(\"mcell_mc2d_width\",1000, \"metacell\")\nmcell_mc2d_plot(mc2d_id=\"PBMC_2dproj\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SingleCell RNA-seq Workshop",
    "section": "",
    "text": "This workshop was presented to the Irimia’s Group at CRG in Barcelona on June/July 2022"
  },
  {
    "objectID": "index.html#slides-can-be-found-here",
    "href": "index.html#slides-can-be-found-here",
    "title": "SingleCell RNA-seq Workshop",
    "section": "Slides can be found HERE",
    "text": "Slides can be found HERE"
  },
  {
    "objectID": "sc_scripts.html",
    "href": "sc_scripts.html",
    "title": "SingleCell RNA-seq Workshop",
    "section": "",
    "text": "if (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nif (!require(\"pacman\", quietly = TRUE))\n    BiocManager::install(\"pacman\")\np_load(\"SingleCellExperiment\")\np_load(\"Seurat\")\np_load(\"hdf5r\")\np_load(\"DropletUtils\")\np_load(\"dplyr\")\np_load(\"scater\")\np_load(\"Matrix\")\np_load(\"scran\")\np_load(\"ggplot2\")\np_load(\"igraph\")\np_load(\"SingleR\")\np_load(\"celldex\")\n#p_load(\"iSEE\")\np_load(\"Nebulosa\")\np_load(\"UpSetR\")\np_load(\"clustree\")\np_load(\"Rmagic\")\np_load(\"SeuratWrappers\")\np_load(\"CelliD\")\np_load(\"pheatmap\")\np_load(\"pals\")\np_load(\"readr\")\n\nif (!require(\"devtools\"))\ninstall.packages(\"devtools\")\nif(!require(\"findPC\"))\ndevtools::install_github(\"haotian-zhuang/findPC\")\nif(!require(\"SeuratWrappers\"))\nremotes::install_github('satijalab/seurat-wrappers')"
  },
  {
    "objectID": "sc_scripts.html#download-data-and-read-it.",
    "href": "sc_scripts.html#download-data-and-read-it.",
    "title": "SingleCell RNA-seq Workshop",
    "section": "Download Data and read it.",
    "text": "Download Data and read it.\n\nsystem(\"wget -q https://cf.10xgenomics.com/samples/cell-exp/6.1.0/10k_PBMC_3p_nextgem_Chromium_X/10k_PBMC_3p_nextgem_Chromium_X_filtered_feature_bc_matrix.h5\")\n\n\nsce_data<- DropletUtils::read10xCounts(\"10k_PBMC_3p_nextgem_Chromium_X_filtered_feature_bc_matrix.h5\",sample.names = \"pbmc\")\n\nmat<-Seurat::Read10X_h5(\"10k_PBMC_3p_nextgem_Chromium_X_filtered_feature_bc_matrix.h5\")\nseurat_data <- CreateSeuratObject(counts = mat, project = \"pbmc\", min.cells = 0, min.features =0)\n\n\nExplore datasets\n\nsce_data\n\nclass: SingleCellExperiment \ndim: 36601 11996 \nmetadata(1): Samples\nassays(1): counts\nrownames(36601): ENSG00000243485 ENSG00000237613 ... ENSG00000278817\n  ENSG00000277196\nrowData names(3): ID Symbol Type\ncolnames: NULL\ncolData names(2): Sample Barcode\nreducedDimNames(0):\nmainExpName: NULL\naltExpNames(0):\n\n\n\nseurat_data\n\nAn object of class Seurat \n36601 features across 11996 samples within 1 assay \nActive assay: RNA (36601 features, 0 variable features)\n\n\n\ncolData(sce_data) %>% head()\n\nDataFrame with 6 rows and 2 columns\n       Sample            Barcode\n  <character>        <character>\n1        pbmc AAACCCAAGGCCCAAA-1\n2        pbmc AAACCCAAGTAATACG-1\n3        pbmc AAACCCAAGTCACACT-1\n4        pbmc AAACCCACAAAGCGTG-1\n5        pbmc AAACCCACAATCGAAA-1\n6        pbmc AAACCCACAGATCACT-1\n\n\n\nrownames(sce_data) %>% head()\n\n[1] \"ENSG00000243485\" \"ENSG00000237613\" \"ENSG00000186092\" \"ENSG00000238009\"\n[5] \"ENSG00000239945\" \"ENSG00000239906\"\n\n\n\nrowData(sce_data) %>% head()\n\nDataFrame with 6 rows and 3 columns\n                             ID      Symbol            Type\n                    <character> <character>     <character>\nENSG00000243485 ENSG00000243485 MIR1302-2HG Gene Expression\nENSG00000237613 ENSG00000237613     FAM138A Gene Expression\nENSG00000186092 ENSG00000186092       OR4F5 Gene Expression\nENSG00000238009 ENSG00000238009  AL627309.1 Gene Expression\nENSG00000239945 ENSG00000239945  AL627309.3 Gene Expression\nENSG00000239906 ENSG00000239906  AL627309.2 Gene Expression\n\n\n\nrownames(seurat_data) %>% head()\n\n[1] \"MIR1302-2HG\" \"FAM138A\"     \"OR4F5\"       \"AL627309.1\"  \"AL627309.3\" \n[6] \"AL627309.2\" \n\n\n\nidentical(rownames(seurat_data), rowData(sce_data)$Symbol)\n\n[1] FALSE\n\n\n\nsetdiff(rownames(seurat_data),rowData(sce_data)$Symbol)\n\n [1] \"TBCE.1\"           \"LINC01238.1\"      \"CYB561D2.1\"       \"MATR3.1\"         \n [5] \"LINC01505.1\"      \"HSPA14.1\"         \"GOLGA8M.1\"        \"GGT1.1\"          \n [9] \"ARMCX5-GPRASP2.1\" \"TMSB15B.1\"       \n\n\n\ngrep(\"LINC01238\", rownames(seurat_data),value=T)\n\n[1] \"LINC01238\"   \"LINC01238.1\"\n\n\n\nrowData(sce_data)[which(rowData(sce_data)$Symbol == \"LINC01238\"),]\n\nDataFrame with 2 rows and 3 columns\n                             ID      Symbol            Type\n                    <character> <character>     <character>\nENSG00000237940 ENSG00000237940   LINC01238 Gene Expression\nENSG00000261186 ENSG00000261186   LINC01238 Gene Expression"
  },
  {
    "objectID": "sc_scripts.html#quality-control",
    "href": "sc_scripts.html#quality-control",
    "title": "SingleCell RNA-seq Workshop",
    "section": "Quality Control",
    "text": "Quality Control\n\nSeurat\n\nseurat_data[[\"Mitochondrial\"]] <- PercentageFeatureSet(seurat_data, pattern = \"^MT-\")\nVlnPlot(seurat_data, features = c( \"nCount_RNA\",\"nFeature_RNA\", \"Mitochondrial\"), ncol = 3,pt.size = 0.01,log = T)\n\n\n\n\n\n\nBioconductor\n\nis.mito <-grepl(\"^MT-\", rowData(sce_data)$Symbol, perl = T) %>% which\nsce_data<-scater::addPerCellQC(sce_data,subsets=list(\"Mitochondrial\"=is.mito))\ngridExtra::grid.arrange(\n    plotColData(sce_data, y=\"sum\",) +\n        scale_y_log10() + ggtitle(\"Total count\"),\n    plotColData(sce_data, y=\"detected\") +\n        scale_y_log10() + ggtitle(\"Detected features\"),\n    plotColData(sce_data, y=\"subsets_Mitochondrial_percent\") + ggtitle(\"Mito percent\")+scale_y_log10(),\n    ncol=3\n)\n\n\n\n\n\n\nIdentify thresholds\n\nqc.lib2 <- scater::isOutlier(seurat_data$nCount_RNA, log=TRUE, type=\"lower\",nmads=3) #sce_data$sum\nqc.nexprs2 <- isOutlier(seurat_data$nFeature_RNA, log=TRUE,nmads=3, type=\"lower\") #sce_data$detected\nqc.mito2 <- isOutlier(seurat_data$Mitochondrial ,nmads=3,type=\"higher\") #sce_data$subsets_Mitochondrial_percent\ndiscard2 <- qc.lib2 | qc.nexprs2  | qc.mito2\n\n\ndata.frame(\"Total count\"=attr(qc.lib2, \"thresholds\"),\n\"Detected features\"=attr(qc.nexprs2, \"thresholds\"),\n\"Mito percent\"=attr(qc.mito2, \"thresholds\"))\n\n       Total.count Detected.features Mito.percent\nlower     1679.027          591.9659         -Inf\nhigher         Inf               Inf     13.47941\n\n\n\ndata.frame(\"Total count\"=sum(qc.lib2), \"Detected features\"=sum(qc.nexprs2),\n  \"Mito percent\"=sum(qc.mito2),\"Total\"=sum(discard2))\n\n  Total.count Detected.features Mito.percent Total\n1         307               245          525   571\n\n\n\nsce_data$discard<-discard2\nseurat_data$discard<-discard2\ngridExtra::grid.arrange(\n    plotColData(sce_data, y=\"sum\",colour_by=\"discard\") +\n        scale_y_log10() + ggtitle(\"Total count\"),\n    plotColData(sce_data, y=\"detected\",colour_by=\"discard\") +\n        scale_y_log10() + ggtitle(\"Detected features\"),\n    plotColData(sce_data, y=\"subsets_Mitochondrial_percent\",colour_by=\"discard\") + ggtitle(\"Mito percent\")+scale_y_log10(),\n    ncol=3\n)\n\n\n\n\n\nseurat_data<-subset(seurat_data,subset= discard!=TRUE)\nsce_data<-sce_data[,!sce_data$discard]"
  },
  {
    "objectID": "sc_scripts.html#normalization",
    "href": "sc_scripts.html#normalization",
    "title": "SingleCell RNA-seq Workshop",
    "section": "Normalization",
    "text": "Normalization\n\nSeurat\n\nseurat_data <- NormalizeData(seurat_data, normalization.method = \"LogNormalize\", scale.factor = 10000, verbose=F)\nseurat_data <- SCTransform(seurat_data, verbose=F) #could regress for multiple factors, including batch\n\n\nAssays(seurat_data)\n\n[1] \"RNA\" \"SCT\"\n\n\n\nDefaultAssay(seurat_data)\n\n[1] \"SCT\"\n\n\n\ncolSums(GetAssayData(seurat_data,slot = \"counts\")[,1:5])\n\nAAACCCAAGGCCCAAA-1 AAACCCAAGTAATACG-1 AAACCCAAGTCACACT-1 AAACCCACAAAGCGTG-1 \n              8022               7459               7798               6492 \nAAACCCACAATCGAAA-1 \n              7242 \n\n\n\ncolSums(GetAssayData(seurat_data,slot = \"data\")[,1:5])\n\nAAACCCAAGGCCCAAA-1 AAACCCAAGTAATACG-1 AAACCCAAGTCACACT-1 AAACCCACAAAGCGTG-1 \n          2726.429           2719.696           2846.029           1609.266 \nAAACCCACAATCGAAA-1 \n          2070.074 \n\n\n\ncolSums(GetAssayData(seurat_data,assay = \"RNA\",slot = \"counts\")[,1:5])\n\nAAACCCAAGGCCCAAA-1 AAACCCAAGTAATACG-1 AAACCCAAGTCACACT-1 AAACCCACAAAGCGTG-1 \n             12143               7811               9741               5561 \nAAACCCACAATCGAAA-1 \n              7399 \n\n\n\ncolSums(GetAssayData(seurat_data,assay = \"RNA\",slot = \"data\")[,1:5])\n\nAAACCCAAGGCCCAAA-1 AAACCCAAGTAATACG-1 AAACCCAAGTCACACT-1 AAACCCACAAAGCGTG-1 \n          3026.689           3154.815           3159.359           2112.424 \nAAACCCACAATCGAAA-1 \n          2459.633 \n\n\n\n\nBioconductor\n\n\n\n\n\n\nWarning:\n\n\n\nMight take a little bit!\n\n\n\nset.seed(1000)\nclusters <- scran::quickCluster(sce_data)\nsce_data <- scran::computeSumFactors(sce_data, cluster=clusters)\nsce_data <- scater::logNormCounts(sce_data)\n\n\nassayNames(sce_data)\n\n[1] \"counts\"    \"logcounts\"\n\n\n\ncolSums(logcounts(sce_data)[,1:5])\n\n[1] 3961.312 3783.641 3897.069 3186.119 3533.383"
  },
  {
    "objectID": "sc_scripts.html#feature-selection",
    "href": "sc_scripts.html#feature-selection",
    "title": "SingleCell RNA-seq Workshop",
    "section": "Feature Selection",
    "text": "Feature Selection\n\nSeurat\n\nDefaultAssay(seurat_data)<-\"RNA\"\nseurat_data <- FindVariableFeatures(seurat_data, assay=\"RNA\",selection.method = \"vst\", nfeatures = 2000, verbose=F)\n\ntop10 <- head(VariableFeatures(seurat_data), 10)\nplot1 <- VariableFeaturePlot(seurat_data)\nLabelPoints(plot = plot1, points = top10, repel = TRUE)+theme(legend.position = \"none\")\n\nWhen using repel, set xnudge and ynudge to 0 for optimal results\n\n\nWarning: Transformation introduced infinite values in continuous x-axis\n\n\nWarning: Removed 11053 rows containing missing values (geom_point).\n\n\n\n\n\n\n\nBioconductor\n\ndec.pbmc <- modelGeneVar(sce_data)\nchosen <- getTopHVGs(dec.pbmc, n=2000)\nrowSubset(sce_data) <- chosen\n\nfit.pbmc <- metadata(dec.pbmc)\nplot2<-data.frame(mean=fit.pbmc$mean,var=fit.pbmc$var, color=rownames(sce_data)%in% chosen)%>%\nggplot(aes(x=mean,y=var))+geom_point(aes(color=color))+scale_color_manual(values = c(\"black\",\"red\"))+geom_function(color=\"dodgerblue\",fun =fit.pbmc$trend ,size=1.5)+theme(legend.position = \"none\")#+scale_x_continuous(trans='log2')+scale_y_continuous(trans='log2')\n\nt<-which(rownames(sce_data)%in% chosen[1:10])\ntd<-data.frame(mean=fit.pbmc$mean[t],var=fit.pbmc$var[t],symbol=rowData(sce_data)$Symbol[t])\nplot2+ggrepel::geom_text_repel(data=td,aes(label=symbol))+ylab(\"Variance of log-expression\")+xlab(\"Mean of log-expression\")"
  },
  {
    "objectID": "sc_scripts.html#dimension-reduction",
    "href": "sc_scripts.html#dimension-reduction",
    "title": "SingleCell RNA-seq Workshop",
    "section": "Dimension Reduction",
    "text": "Dimension Reduction\n\nPCA\n\nSeurat\n\nall.genes <- rownames(seurat_data)\nseurat_data <- ScaleData(seurat_data, features = all.genes)\n\nCentering and scaling data matrix\n\nseurat_data <- RunPCA(seurat_data,\n                      features = VariableFeatures(object = seurat_data),\n                      verbose = F,npcs = 50)\nDimPlot(seurat_data,reduction =  \"pca\",)\n\n\n\n\n\nElbowPlot(seurat_data)\n\n\n\n\n\nstdev_pca_seurat<-seurat_data@reductions$pca@stdev \nfindPC(sdev = stdev_pca_seurat,number = c(30,40,50),method = 'all',figure = T)\n\n\n\n\n      Piecewise linear model First derivative Second derivative\n30PCs                      3                6                 6\n40PCs                      3               11                 6\n50PCs                      4               11                11\n      Preceding residual Perpendicular line K-means clustering\n30PCs                  6                  6                  2\n40PCs                  6                  6                  6\n50PCs                 11                  7                  6\n\n\n\n\nBioconductor\n\nsce_data <- runPCA(sce_data,ncomponents = 50)\nplotPCA(sce_data)\n\n\n\n\n\nstdev_pca_sce <- attr(reducedDim(sce_data, \"PCA\"),\n  \"varExplained\") %>% sqrt()\n\nplot(stdev_pca_sce)\n\n\n\n\n\nfindPC(sdev = stdev_pca_sce,number = c(30,40,50),method = 'all',figure = T)\n\n\n\n\n      Piecewise linear model First derivative Second derivative\n30PCs                      3                6                 4\n40PCs                      3                9                 4\n50PCs                      4               11                 9\n      Preceding residual Perpendicular line K-means clustering\n30PCs                  6                  6                  2\n40PCs                  7                  6                  2\n50PCs                 11                  7                  2\n\n\nI choose 11 PC.\n\n\n\nTSNE\n\nSeurat\n\nseurat_data <- RunTSNE(seurat_data, dims = 1:11,reduction = \"pca\")\nDimPlot(seurat_data, reduction = \"tsne\")\n\n\n\n\n\nsce_data <- runTSNE(sce_data, dimred=\"PCA\",n_dimred=11)\nplotReducedDim(sce_data, dimred=\"TSNE\")\n\n\n\n\n\nsce_data <- runTSNE(sce_data, dimred=\"PCA\",n_dimred=11,perplexity=5)\nplotReducedDim(sce_data, dimred=\"TSNE\")\n\n\n\n\n\nsce_data <- runTSNE(sce_data, dimred=\"PCA\",n_dimred=11,perplexity=20)\nplotReducedDim(sce_data, dimred=\"TSNE\")\n\n\n\n\n\nsce_data <- runTSNE(sce_data, dimred=\"PCA\",n_dimred=11,perplexity=80)\nplotReducedDim(sce_data, dimred=\"TSNE\")\n\n\n\n\n\n\n\nUMAP\n\nSeurat\n\nseurat_data <- RunUMAP(seurat_data, dims = 1:11,reduction = \"pca\",verbose = F)\n\nWarning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric\nTo use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'\nThis message will be shown once per session\n\nDimPlot(seurat_data, reduction = \"umap\")\n\n\n\n\n\nseurat_data <- RunUMAP(seurat_data, dims = 1:11,reduction = \"pca\",verbose = F,n.neighbors = 5)\nDimPlot(seurat_data, reduction = \"umap\")\n\n\n\n\n\nseurat_data <- RunUMAP(seurat_data, dims = 1:11,reduction = \"pca\",verbose = F,n.neighbors = 50)\nDimPlot(seurat_data, reduction = \"umap\")\n\n\n\n\n\nseurat_data <- RunUMAP(seurat_data, dims = 1:11,reduction = \"pca\",verbose = F,n.neighbors = 100)\nDimPlot(seurat_data, reduction = \"umap\")\n\n\n\n\n\nset.seed(05122022)\nsce_data <- runUMAP(sce_data, dimred=\"PCA\",n_dimred=11)\nplotReducedDim(sce_data, dimred=\"UMAP\")"
  },
  {
    "objectID": "sc_scripts.html#clustering",
    "href": "sc_scripts.html#clustering",
    "title": "SingleCell RNA-seq Workshop",
    "section": "Clustering",
    "text": "Clustering\n\nSeurat\n\nseurat_data <- FindNeighbors(seurat_data, dims = 1:11)\n\nComputing nearest neighbor graph\n\n\nComputing SNN\n\nseurat_data <- FindClusters(seurat_data, resolution = 0.5)\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 11425\nNumber of edges: 385473\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.9107\nNumber of communities: 15\nElapsed time: 1 seconds\n\nDimPlot(seurat_data, reduction = \"umap\")\n\n\n\n\n\nseurat_data <- FindClusters(seurat_data, resolution = 1.5)\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 11425\nNumber of edges: 385473\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8360\nNumber of communities: 22\nElapsed time: 1 seconds\n\nDimPlot(seurat_data, reduction = \"umap\")\n\n\n\n\n\nseurat_data <- FindClusters(seurat_data, resolution = 0.1)\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 11425\nNumber of edges: 385473\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.9677\nNumber of communities: 9\nElapsed time: 1 seconds\n\nDimPlot(seurat_data, reduction = \"umap\")\n\n\n\n\n\n\nBioconductor\n\ng <- buildSNNGraph(sce_data, k=11, use.dimred = \"PCA\")\nclust <- igraph::cluster_walktrap(g)$membership\nsce_data$cluster_rank_walktrap <- factor(clust)\nplotReducedDim(sce_data, \"UMAP\", colour_by=\"cluster_rank_walktrap\")\n\n\n\n\n\nreducedDim(sce_data,\"UMAP\") %>% cbind(colData(sce_data)) %>%\n  as_tibble %>%\n  ggplot(aes(x=V1,y=V2))+\n  geom_point(aes(color=cluster_rank_walktrap), size=0.2)+\n  cowplot::theme_cowplot(12)+\n  guides(color = guide_legend(override.aes = list(size=2)))+\n  ylab(\"UMAP_2\")+xlab(\"UMAP_1\")\n\n\n\n\nClustering like Seurat and playing with resolution\n\ng <- buildSNNGraph(sce_data, k=11, use.dimred = \"PCA\",type = \"jaccard\")\nclust2 <- igraph::cluster_louvain(g, resolution = 0.5)$membership\nsce_data$cluster_0.5 <- factor(clust2)\nplotReducedDim(sce_data, \"UMAP\", colour_by=\"cluster_0.5\")\n\n\n\n\n\nclust2 <- igraph::cluster_louvain(g, resolution = 0.1)$membership\nsce_data$cluster_0.1 <- factor(clust2)\nplotReducedDim(sce_data, \"UMAP\", colour_by=\"cluster_0.1\")\n\n\n\n\n\nclust2 <- igraph::cluster_louvain(g, resolution = 1.5)$membership\nsce_data$cluster_1.5 <- factor(clust2)\nplotReducedDim(sce_data, \"UMAP\", colour_by=\"cluster_1.5\")\n\n\n\n\n\nCluster Behavior\n\ncolors<-scater:::.get_palette(\"tableau10medium\")\n\nSilhouette width\n\nsil.approx <- bluster::approxSilhouette(reducedDim(sce_data, \"PCA\"), clusters=sce_data$cluster_0.5)\nsil.data <- as.data.frame(sil.approx)\nsil.data$closest <- factor(ifelse(sil.data$width > 0, sce_data$cluster_0.5, sil.data$other))\nsil.data$cluster <- sce_data$cluster_0.5\nggplot(sil.data, aes(x=cluster, y=width, colour=closest)) +\n    ggbeeswarm::geom_quasirandom(method=\"smiley\")+\n  scale_color_manual(values = colors)\n\n\n\n\nCluster purity\n\npure.pbmc <- bluster::neighborPurity(reducedDim(sce_data, \"PCA\"), sce_data$cluster_0.5)\npure.data <- as.data.frame(pure.pbmc)\npure.data$maximum <- factor(pure.data$maximum)\npure.data$cluster <- sce_data$cluster_0.5\nggplot(pure.data, aes(x=cluster, y=purity, colour=maximum)) +\n    ggbeeswarm::geom_quasirandom(method=\"smiley\")+\n  scale_color_manual(values = colors)\n\n\n\n\n\n\nComparing Clusters\n\ntab <- table(\"Walktrap\"=sce_data$cluster_rank_walktrap, \"Louvain\"=sce_data$cluster_0.5)\nrownames(tab) <- paste(\"Walktrap\", rownames(tab))\ncolnames(tab) <- paste(\"Louvain\", colnames(tab))\n\npheatmap::pheatmap(log10(tab+10), color=viridis::viridis(100), cluster_cols=FALSE, cluster_rows=FALSE)\n\n\n\n\n\njacc.mat <- bluster::linkClustersMatrix(sce_data$cluster_rank_walktrap, sce_data$cluster_0.5)\nrownames(jacc.mat) <- paste(\"Walktrap\", rownames(jacc.mat))\ncolnames(jacc.mat) <- paste(\"Louvain\", colnames(jacc.mat))\npheatmap::pheatmap(jacc.mat, color=viridis::viridis(100), cluster_cols=FALSE, cluster_rows=FALSE)\n\n\n\n\n\nmat_clust<-data.frame(\"res_0.1\"=sce_data$cluster_0.1, \"res_0.5\"=sce_data$cluster_0.5,\"res_1.5\"=sce_data$cluster_1.5)\nset.seed(1111)\nclustree(mat_clust, prefix=\"res_\")"
  },
  {
    "objectID": "sc_scripts.html#markers-seurat-object",
    "href": "sc_scripts.html#markers-seurat-object",
    "title": "SingleCell RNA-seq Workshop",
    "section": "Markers (Seurat Object)",
    "text": "Markers (Seurat Object)\n\nCluster 1 vs Cluster 2\n\nIdents(seurat_data)<-seurat_data$RNA_snn_res.0.5\nseurat_data_filt<-seurat_data[rowSums(seurat_data@assays$RNA@counts >0 ) > 50,]\n\nde_1_2<-FindMarkers(seurat_data_filt, ident.1 =1,ident.2=2,min.pct = 0.25, logfc.threshold = 0.25)\nggplot(de_1_2,aes(x=avg_log2FC, y=-log10(p_val_adj)))+geom_point(aes(color=pct.1))+\n  scale_color_gradient(low=\"black\",high = \"magenta\")\n\n\n\n\n\n\nFind All Markers one vs the rest\n\nseurat.markers <- FindAllMarkers(seurat_data_filt, only.pos = TRUE,\n                                 min.pct = 0.50, logfc.threshold = 0.5)\n\nCalculating cluster 0\n\n\nCalculating cluster 1\n\n\nCalculating cluster 2\n\n\nCalculating cluster 3\n\n\nCalculating cluster 4\n\n\nCalculating cluster 5\n\n\nCalculating cluster 6\n\n\nCalculating cluster 7\n\n\nCalculating cluster 8\n\n\nCalculating cluster 9\n\n\nCalculating cluster 10\n\n\nCalculating cluster 11\n\n\nCalculating cluster 12\n\n\nCalculating cluster 13\n\n\nCalculating cluster 14\n\nhead(seurat.markers)\n\n        p_val avg_log2FC pct.1 pct.2 p_val_adj cluster    gene\nCCR7        0   1.746634 0.823 0.156         0       0    CCR7\nBCL11B      0   1.620198 0.926 0.292         0       0  BCL11B\nTCF7        0   1.590896 0.869 0.230         0       0    TCF7\nLEF1        0   1.549810 0.762 0.124         0       0    LEF1\nPIK3IP1     0   1.479750 0.817 0.252         0       0 PIK3IP1\nLDHB        0   1.474059 0.975 0.619         0       0    LDHB\n\n\n\n\nComparing clusters by pairs\n\nmarker.info <- scoreMarkers(seurat_data_filt@assays$RNA@data, seurat_data_filt$RNA_snn_res.0.5)\n\n\nlength(marker.info)\n\n[1] 15\n\n\n\nsapply(marker.info, dim)\n\n         0     1     2     3     4     5     6     7     8     9    10    11\n[1,] 14485 14485 14485 14485 14485 14485 14485 14485 14485 14485 14485 14485\n[2,]    19    19    19    19    19    19    19    19    19    19    19    19\n        12    13    14\n[1,] 14485 14485 14485\n[2,]    19    19    19\n\n\n\nhead(marker.info$'0')\n\nDataFrame with 6 rows and 19 columns\n           self.average other.average self.detected other.detected\n              <numeric>     <numeric>     <numeric>      <numeric>\nAL627309.5   0.00996103    0.03546981    0.01088534      0.0539750\nLINC01409    0.05994775    0.06675977    0.06277213      0.0960046\nLINC01128    0.07511543    0.04580293    0.07656023      0.0671701\nLINC00115    0.00826562    0.00918127    0.00798258      0.0136998\nFAM41C       0.00990948    0.01287641    0.01052250      0.0197699\nNOC2L        0.19921853    0.20061216    0.19375907      0.2662586\n           mean.logFC.cohen min.logFC.cohen median.logFC.cohen max.logFC.cohen\n                  <numeric>       <numeric>          <numeric>       <numeric>\nAL627309.5     -0.150527969      -0.4867261        -0.14753206        0.101746\nLINC01409      -0.023213597      -0.2064664         0.00948573        0.100287\nLINC01128       0.135353397      -0.0608045         0.12135853        0.336278\nLINC00115      -0.005953826      -0.0609704        -0.01779990        0.122247\nFAM41C         -0.012910709      -0.3126970        -0.00374303        0.141978\nNOC2L           0.000613232      -0.2793831         0.01173464        0.161922\n           rank.logFC.cohen  mean.AUC   min.AUC median.AUC   max.AUC  rank.AUC\n                  <integer> <numeric> <numeric>  <numeric> <numeric> <integer>\nAL627309.5             1247  0.478639  0.433328   0.479584  0.504305      2225\nLINC01409              3024  0.485058  0.440184   0.488638  0.503426      2153\nLINC01128               596  0.506330  0.464176   0.512293  0.529046       766\nLINC00115              2428  0.497177  0.490019   0.496989  0.503991      2242\nFAM41C                 1631  0.495443  0.455740   0.498022  0.505261      1354\nNOC2L                  1455  0.477961  0.380197   0.494532  0.510510      2231\n           mean.logFC.detected min.logFC.detected median.logFC.detected\n                     <numeric>          <numeric>             <numeric>\nAL627309.5           -1.299155          -3.627340             -1.608572\nLINC01409            -0.476843          -1.551686             -0.444566\nLINC01128             0.379332          -0.973758              0.463179\nLINC00115            -0.500435          -1.130641             -0.655775\nFAM41C               -0.352989          -2.422225             -0.381313\nNOC2L                -0.372021          -1.387882             -0.182204\n           max.logFC.detected rank.logFC.detected\n                    <numeric>           <integer>\nAL627309.5           1.818183                 342\nLINC01409            0.141970                3057\nLINC01128            1.375129                 284\nLINC00115            0.528197                1213\nFAM41C               1.614667                 447\nNOC2L                0.156357                3455\n\n\n\ncolnames(marker.info$'0')\n\n [1] \"self.average\"          \"other.average\"         \"self.detected\"        \n [4] \"other.detected\"        \"mean.logFC.cohen\"      \"min.logFC.cohen\"      \n [7] \"median.logFC.cohen\"    \"max.logFC.cohen\"       \"rank.logFC.cohen\"     \n[10] \"mean.AUC\"              \"min.AUC\"               \"median.AUC\"           \n[13] \"max.AUC\"               \"rank.AUC\"              \"mean.logFC.detected\"  \n[16] \"min.logFC.detected\"    \"median.logFC.detected\" \"max.logFC.detected\"   \n[19] \"rank.logFC.detected\"  \n\n\n\nmarker.info$'3' %>% as_tibble(rownames = \"Gene\") %>%arrange(rank.AUC) %>% filter(rank.AUC==1) %>% as.data.frame()\n\n    Gene self.average other.average self.detected other.detected\n1   CTSS     3.801811      2.080293             1      0.8156463\n2 S100A9     5.753271      2.011809             1      0.6386556\n3 S100A8     5.107025      1.521323             1      0.5392722\n4 S100A6     3.719960      2.502475             1      0.9260105\n5   MNDA     3.301313      1.206530             1      0.5152278\n6    LYZ     5.058072      2.141061             1      0.6497189\n  mean.logFC.cohen min.logFC.cohen median.logFC.cohen max.logFC.cohen\n1         3.313892      -0.5512238           3.708353        7.052284\n2         6.274254       1.3917778           5.539206       11.819090\n3         6.276313       1.4020899           6.298098       11.098143\n4         2.271957       0.5630242           2.176300        5.077679\n5         5.581362       0.4718434           4.615489       11.213083\n6         6.161543       0.5095405           5.733042       12.017791\n  rank.logFC.cohen  mean.AUC   min.AUC median.AUC max.AUC rank.AUC\n1                2 0.8566416 0.3484391  0.9856361       1        1\n2                1 0.9693524 0.8408574  0.9987807       1        1\n3                1 0.9662876 0.8410464  0.9985267       1        1\n4                1 0.8879765 0.6536828  0.9401544       1        1\n5                1 0.9377599 0.6316344  0.9969582       1        1\n6                1 0.9356778 0.6371454  0.9997167       1        1\n  mean.logFC.detected min.logFC.detected median.logFC.detected\n1           0.3635300      -3.203427e-16            0.06061152\n2           0.8283111       0.000000e+00            0.78329730\n3           1.2528259       0.000000e+00            1.13805007\n4           0.1295625      -3.203427e-16            0.01560176\n5           1.8888663       0.000000e+00            1.28525938\n6           0.8324444      -3.203427e-16            0.69699944\n  max.logFC.detected rank.logFC.detected\n1          1.3010340                1755\n2          1.6769228                1253\n3          2.5162117                 814\n4          0.9828589                1755\n5          4.6288414                 322\n6          1.8354873                1326\n\n\n\ng<-\"MNDA\"\nseurat_data_filt@assays$RNA@data[g,] %>% as_tibble(rownames = \"Cell\") %>% left_join(as_tibble(seurat_data_filt[[]], rownames=\"Cell\"), by=c(\"Cell\")) %>%\n    ggplot(aes(x=RNA_snn_res.0.5, y=value))+geom_violin(scale = \"width\", adjust=1)+\n    ggbeeswarm::geom_quasirandom(size=0.1, aes(color=RNA_snn_res.0.5))+\n  theme(legend.position = \"none\")\n\n\n\n\nRank means: is the smallest rank of each gene across all pairwise comparisons;If a gene has a small min-rank, we can conclude that it is one of the top upregulated genes in at least one comparison of cluster of interest to another cluster\nOn some occasions, ranking by the minimum can be highly effective as it yields a concise set of highly cluster-specific markers.\n\ngenes_c7<-marker.info$'7' %>% as_tibble(rownames = \"Gene\") %>% filter(rank.logFC.cohen<=5) %>% .$Gene\nplotGroupedHeatmap(Seurat::as.SingleCellExperiment(seurat_data), features=genes_c7, group=\"RNA_snn_res.0.5\", \n    center=TRUE, zlim=c(-3, 3))\n\n\n\n\n\nplotDots(Seurat::as.SingleCellExperiment(seurat_data), genes_c7, group=\"RNA_snn_res.0.5\")+scale_color_gradient(low = \"white\", high = \"orange\") \n\nScale for 'colour' is already present. Adding another scale for 'colour',\nwhich will replace the existing scale."
  },
  {
    "objectID": "sc_scripts.html#visualizations",
    "href": "sc_scripts.html#visualizations",
    "title": "SingleCell RNA-seq Workshop",
    "section": "Visualizations",
    "text": "Visualizations\n\nmarkers.to.plot <- seurat.markers %>% group_by(cluster) %>% slice_head(n=2) %>% .$gene %>% unique\nDotPlot(seurat_data, features = markers.to.plot, cols=c(\"white\",\"orange\")) +\n    RotatedAxis()\n\n\n\n\n\nmarkers.to.plot <- seurat.markers %>% group_by(cluster) %>% slice_head(n=5) %>% .$gene %>% unique\nDoHeatmap(subset(seurat_data, downsample = 100), features = markers.to.plot, size = 3)\n\n\n\n\n\ntable(seurat.markers$cluster)\n\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14 \n162 521  92 429 418 122 128 132 305 384  45 193 511  88 245 \n\n\n\nlist_genes<-seurat.markers %>% group_by(cluster) %>% summarise(genes=list(gene)) %>% .$genes\nnames(list_genes)<-paste0(\"Cluster_\", unique(seurat.markers$cluster))\n\n\nupset(fromList(list_genes),nsets = length(names(list_genes)),order.by = \"freq\")\n\n\n\n\n\ngenes2plot<-seurat.markers %>% as_tibble() %>% group_by(cluster) %>% arrange(desc(avg_log2FC)) %>% slice_head(n=1) %>% .$gene %>% unique()\nVlnPlot(seurat_data, features = genes2plot, pt.size = 0)\n\n\n\n\n\nRidgePlot(seurat_data,features = \"LYZ\")\n\nPicking joint bandwidth of 0.18\n\n\n\n\n\n\nFeaturePlot(seurat_data,features = c(\"CD4\", \"CCR7\")) \n\n\n\n\n\nFeaturePlot(seurat_data, features = c(\"CD4\", \"CCR7\"), blend = TRUE)\n\n\n\n\n\nNebulosa::plot_density(seurat_data, c(\"CD4\", \"CCR7\"))\n\n\n\n\n\nNebulosa::plot_density(seurat_data, c(\"CD4\", \"CCR7\"), joint = T)\n\n\n\n\n\nMagic\n\n\n\n\n\n\nIMPORTANT WARNING\n\n\n\nThis might take a lot of memory\n\n\n\n# seurat_data_filt <- magic(seurat_data_filt)\n# seurat_data_filt <- SeuratWrappers::RunALRA(seurat_data_filt)\n# saveRDS(seurat_data_filt,\"seurat_withMagic_ALRA.RDS\")\nseurat_data_filt<-readRDS(\"seurat_withMagic_ALRA.RDS\")\n\n(VlnPlot(seurat_data_filt, features=c(\"CD4\"),assay=\"RNA\")+ theme(legend.position = \"none\")+ggtitle(\"LogNormalize\"))+\n(VlnPlot(seurat_data_filt, features=c(\"CD4\"), assay=\"MAGIC_RNA\")+theme(legend.position = \"none\")+ggtitle(\"MAGIC\"))+\n(VlnPlot(seurat_data_filt, features=c(\"CD4\"), assay=\"alra\")+theme(legend.position = \"none\")+ggtitle(\"ALRA\"))\n\n\n\n\n\nseurat_data_filt@active.assay <- 'MAGIC_RNA'\na<-FeaturePlot(seurat_data_filt, features = c(\"CD4\"))+ scale_color_viridis_c(option = \"C\")\n\nScale for 'colour' is already present. Adding another scale for 'colour',\nwhich will replace the existing scale.\n\nb<-FeaturePlot(seurat_data_filt, features = c(\"CCR7\"))+ scale_color_viridis_c(option = \"C\")\n\nScale for 'colour' is already present. Adding another scale for 'colour',\nwhich will replace the existing scale.\n\nseurat_data_filt@active.assay <- 'alra'\na1<-FeaturePlot(seurat_data_filt, features = c(\"CD4\"))+ scale_color_viridis_c(option = \"C\")\n\nScale for 'colour' is already present. Adding another scale for 'colour',\nwhich will replace the existing scale.\n\nb1<-FeaturePlot(seurat_data_filt, features = c(\"CCR7\"))+ scale_color_viridis_c(option = \"C\")\n\nScale for 'colour' is already present. Adding another scale for 'colour',\nwhich will replace the existing scale.\n\nseurat_data_filt@active.assay <- 'RNA'\na2<-FeaturePlot(seurat_data_filt, features = c(\"CD4\"))+ scale_color_viridis_c(option = \"C\")\n\nScale for 'colour' is already present. Adding another scale for 'colour',\nwhich will replace the existing scale.\n\nb2<-FeaturePlot(seurat_data_filt, features = c(\"CCR7\"))+ scale_color_viridis_c(option = \"C\")\n\nScale for 'colour' is already present. Adding another scale for 'colour',\nwhich will replace the existing scale.\n\ncowplot::plot_grid(a2,b2,a,b,a1,b1,ncol=2)"
  },
  {
    "objectID": "sc_scripts.html#cluster-annotation",
    "href": "sc_scripts.html#cluster-annotation",
    "title": "SingleCell RNA-seq Workshop",
    "section": "Cluster Annotation",
    "text": "Cluster Annotation\n\nSingleR\n\nref <- celldex::BlueprintEncodeData()\n\nsnapshotDate(): 2022-04-26\n\n\nsee ?celldex and browseVignettes('celldex') for documentation\n\n\nloading from cache\n\n\nsee ?celldex and browseVignettes('celldex') for documentation\n\n\nloading from cache\n\nrownames(sce_data)<-rowData(sce_data)$Symbol\n\n\npred <- SingleR::SingleR(test=sce_data, ref=ref, labels=ref$label.main)\n\n\nplotScoreHeatmap(pred)\n\n\n\n\n\ntab <- table(Assigned=pred$pruned.labels, Cluster=sce_data$cluster_0.5)\npheatmap::pheatmap(log2(tab+1), color=colorRampPalette(c(\"white\", \"blue\"))(101))\n\n\n\n\n\npred2 <- SingleR(test=sce_data, ref=ref, labels=ref$label.fine)\ntab <- table(Assigned=pred2$pruned.labels, Cluster=sce_data$cluster_0.5)\npheatmap::pheatmap(log2(tab+1), color=colorRampPalette(c(\"white\", \"blue\"))(101))\n\n\n\n\n\n\nCelliD\n\nseurat_data_filt <-CelliD::RunMCA(seurat_data_filt)\n\nComputing Fuzzy Matrix\n\n\n5.885 sec elapsed\n\n\nComputing SVD\n\n\n203.832 sec elapsed\n\n\nComputing Coordinates\n\n\n13.332 sec elapsed\n\npanglao <- readr::read_tsv(\"https://panglaodb.se/markers/PanglaoDB_markers_27_Mar_2020.tsv.gz\")\n\nRows: 8286 Columns: 14\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (8): species, official gene symbol, cell type, nicknames, product descri...\ndbl (6): ubiquitousness index, canonical marker, sensitivity_human, sensitiv...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\npanglao_IS <- panglao %>% filter(organ == \"Immune system\") %>% \n                filter(grepl(\"Hs\",species)) %>%\n                group_by(`cell type`) %>% \n                summarise(geneset = list(`official gene symbol`))\npanglao_IS <- setNames(panglao_IS$geneset, panglao_IS$`cell type`)\nlapply(panglao_IS[1:5],head)\n\n$`B cells`\n[1] \"CD2\"   \"CD5\"   \"MS4A1\" \"CR2\"   \"CD22\"  \"FCER2\"\n\n$`B cells memory`\n[1] \"CD38\" \"CD80\" \"CD84\" \"CD86\" \"NT5E\" \"PAX5\"\n\n$`B cells naive`\n[1] \"CD19\"  \"CD2\"   \"CD72\"  \"IL2RA\" \"MME\"   \"ABCB4\"\n\n$Basophils\n[1] \"CD69\"   \"IL3RA\"  \"CCR3\"   \"ENPP3\"  \"FCER1A\" \"TLR4\"  \n\n$`Dendritic cells`\n[1] \"IL6\"  \"CD86\" \"CD83\" \"CD1A\" \"CR2\"  \"TLR9\"\n\n\n\nHGT_gs <- RunCellHGT(seurat_data_filt, pathways = panglao_IS, dims = 1:50, n.features = 200)\n\n\ncalculating distance\n\n\nranking genes\n\n\n22 pathways kept for hypergeometric test out of 25, 3 filtered as less than 10 features was present in the data\n\n\n\ncalculating features overlap\n\n\nperforming hypergeometric test\n\n\n\ndim(HGT_gs)\n\n[1]    22 11425\n\n\n\nHGT_gs[1:5,1:5]\n\n5 x 5 sparse Matrix of class \"dgCMatrix\"\n                AAACCCAAGGCCCAAA-1 AAACCCAAGTAATACG-1 AAACCCAAGTCACACT-1\nB cells                  .                   .                  .       \nB cells memory           .                   .                  .       \nB cells naive            .                   .                  .       \nBasophils                0.0687406           1.179326           .       \nDendritic cells          0.8641467           2.590818           2.289788\n                AAACCCACAAAGCGTG-1 AAACCCACAATCGAAA-1\nB cells                          .          24.843038\nB cells memory                   .          30.488829\nB cells naive                    .          20.201899\nBasophils                        .           .       \nDendritic cells                  .           2.732697\n\n\nThis is a matrix of benjamini hochberg adjusted pvalue pvalue or a sparse matrix of (-log10) benjamini hochberg adjusted pvalue\n\n# For each cell, assess the signature with the lowest corrected p-value (max -log10 corrected p-value)\ngs_prediction <- rownames(HGT_gs)[apply(HGT_gs, 2, which.max)]\nhead(gs_prediction)\n\n[1] \"Macrophages\"     \"Monocytes\"       \"Dendritic cells\" \"T memory cells\" \n[5] \"B cells memory\"  \"B cells naive\"  \n\n\n\n# For each cell, evaluate if the lowest p-value is significant\ngs_prediction_signif <- ifelse(apply(HGT_gs, 2, max)>2, yes = gs_prediction, \"unassigned\") #pvalue<0.01\n\n# Save cell type predictions as metadata within the Seurat object\nseurat_data_filt$CellID_prediction <- gs_prediction_signif\n\n\nDimPlot(seurat_data_filt,reduction =  \"umap\",group.by = \"RNA_snn_res.0.5\")\n\n\n\nDimPlot(seurat_data_filt,reduction =  \"umap\",group.by = \"CellID_prediction\" )\n\n\n\n\n\ntab <- table(Assigned=seurat_data_filt$CellID_prediction, Cluster=seurat_data_filt$RNA_snn_res.0.5)\ntab %>% as.data.frame() %>% ggplot(aes(x=Cluster, y=Freq))+ geom_bar(position = \"fill\", aes(fill=Assigned), stat=\"identity\")+scale_fill_manual(values=unname(pals::alphabet2(22)))"
  },
  {
    "objectID": "sc_scripts.html#isee",
    "href": "sc_scripts.html#isee",
    "title": "SingleCell RNA-seq Workshop",
    "section": "iSEE",
    "text": "iSEE\n\nrownames(sce_data)<-rowData(sce_data)$ID\niSEE(sce_data)"
  }
]