---
title: "SingleCell RNA-seq Workshop"
author: "Luis P Iniguez"
format: html
editor: visual
cleanrmd::html_document_clean:
    theme: "picocss"
---

## Load Packages

```{r Setup,message=FALSE,warning=FALSE}

if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
if (!require("pacman", quietly = TRUE))
    BiocManager::install("pacman")
p_load("SingleCellExperiment")
p_load("Seurat")
p_load("hdf5r")
p_load("DropletUtils")
p_load("dplyr")
p_load("scater")
p_load("Matrix")
p_load("scran")
p_load("ggplot2")

if (!require("devtools"))
install.packages("devtools")
if(!require("findPC"))
devtools::install_github("haotian-zhuang/findPC")


```

## Download Data and read it.

```{r}

system("wget -q https://cf.10xgenomics.com/samples/cell-exp/6.1.0/10k_PBMC_3p_nextgem_Chromium_X/10k_PBMC_3p_nextgem_Chromium_X_filtered_feature_bc_matrix.h5")


sce_data<- DropletUtils::read10xCounts("10k_PBMC_3p_nextgem_Chromium_X_filtered_feature_bc_matrix.h5",sample.names = "pbmc")

mat<-Seurat::Read10X_h5("10k_PBMC_3p_nextgem_Chromium_X_filtered_feature_bc_matrix.h5")
seurat_data <- CreateSeuratObject(counts = mat, project = "pbmc", min.cells = 0, min.features =0)

```

### Explore datasets

```{r}
sce_data
```

```{r}
seurat_data
```

```{r}
colData(sce_data) %>% head()
```

```{r}
rownames(sce_data) %>% head()
```

```{r}
rowData(sce_data) %>% head()
```

```{r}
rownames(seurat_data) %>% head()
```

```{r}
identical(rownames(seurat_data), rowData(sce_data)$Symbol)
```

```{r}
setdiff(rownames(seurat_data),rowData(sce_data)$Symbol)
```

```{r}
grep("LINC01238", rownames(seurat_data),value=T)
```

```{r}
rowData(sce_data)[which(rowData(sce_data)$Symbol == "LINC01238"),]
```

## Quality Control

#### Seurat

```{r}
seurat_data[["Mitochondrial"]] <- PercentageFeatureSet(seurat_data, pattern = "^MT-")
VlnPlot(seurat_data, features = c( "nCount_RNA","nFeature_RNA", "Mitochondrial"), ncol = 3,pt.size = 0.01,log = T)
```

#### Bioconductor

```{r}
is.mito <-grepl("^MT-", rowData(sce_data)$Symbol, perl = T) %>% which
sce_data<-scater::addPerCellQC(sce_data,subsets=list("Mitochondrial"=is.mito))
gridExtra::grid.arrange(
    plotColData(sce_data, y="sum",) +
        scale_y_log10() + ggtitle("Total count"),
    plotColData(sce_data, y="detected") +
        scale_y_log10() + ggtitle("Detected features"),
    plotColData(sce_data, y="subsets_Mitochondrial_percent") + ggtitle("Mito percent")+scale_y_log10(),
    ncol=3
)
```

### Identify thresholds

```{r}
qc.lib2 <- scater::isOutlier(seurat_data$nCount_RNA, log=TRUE, type="lower",nmads=3) #sce_data$sum
qc.nexprs2 <- isOutlier(seurat_data$nFeature_RNA, log=TRUE,nmads=3, type="lower") #sce_data$detected
qc.mito2 <- isOutlier(seurat_data$Mitochondrial ,nmads=3,type="higher") #sce_data$subsets_Mitochondrial_percent
discard2 <- qc.lib2 | qc.nexprs2  | qc.mito2

```

```{r}
data.frame("Total count"=attr(qc.lib2, "thresholds"),
"Detected features"=attr(qc.nexprs2, "thresholds"),
"Mito percent"=attr(qc.mito2, "thresholds"))
```

```{r}
data.frame("Total count"=sum(qc.lib2), "Detected features"=sum(qc.nexprs2),
  "Mito percent"=sum(qc.mito2),"Total"=sum(discard2))
```

```{r}
sce_data$discard<-discard2
seurat_data$discard<-discard2
gridExtra::grid.arrange(
    plotColData(sce_data, y="sum",colour_by="discard") +
        scale_y_log10() + ggtitle("Total count"),
    plotColData(sce_data, y="detected",colour_by="discard") +
        scale_y_log10() + ggtitle("Detected features"),
    plotColData(sce_data, y="subsets_Mitochondrial_percent",colour_by="discard") + ggtitle("Mito percent")+scale_y_log10(),
    ncol=3
)
```

```{r}
seurat_data<-subset(seurat_data,subset= discard!=TRUE)
sce_data<-sce_data[,!sce_data$discard]
```

## Normalization

#### Seurat

```{r, warning=F,}
seurat_data <- NormalizeData(seurat_data, normalization.method = "LogNormalize", scale.factor = 10000, verbose=F)
seurat_data <- SCTransform(seurat_data, verbose=F) #could regress for multiple factors, including batch
```

```{r}
Assays(seurat_data)
```

```{r}
DefaultAssay(seurat_data)
```

```{r}
colSums(GetAssayData(seurat_data,slot = "counts")[,1:5])
```

```{r}
colSums(GetAssayData(seurat_data,slot = "data")[,1:5])
```

```{r}
colSums(GetAssayData(seurat_data,assay = "RNA",slot = "counts")[,1:5])
```

```{r}
colSums(GetAssayData(seurat_data,assay = "RNA",slot = "data")[,1:5])
```

#### Bioconductor

::: callout-warning
## Warning:

Might take a little bit!
:::

```{r}
set.seed(1000)
clusters <- scran::quickCluster(sce_data)
sce_data <- scran::computeSumFactors(sce_data, cluster=clusters)
sce_data <- scater::logNormCounts(sce_data)
```

```{r}
assayNames(sce_data)
```

```{r}
colSums(logcounts(sce_data)[,1:5])
```

## Feature Selection

#### Seurat

```{r}

DefaultAssay(seurat_data)<-"RNA"
seurat_data <- FindVariableFeatures(seurat_data, assay="RNA",selection.method = "vst", nfeatures = 2000, verbose=F)

top10 <- head(VariableFeatures(seurat_data), 10)
plot1 <- VariableFeaturePlot(seurat_data)
LabelPoints(plot = plot1, points = top10, repel = TRUE)+theme(legend.position = "none")


```

#### Bioconductor

```{r}
dec.pbmc <- modelGeneVar(sce_data)
chosen <- getTopHVGs(dec.pbmc, n=2000)
rowSubset(sce_data) <- chosen

fit.pbmc <- metadata(dec.pbmc)
plot2<-data.frame(mean=fit.pbmc$mean,var=fit.pbmc$var, color=rownames(sce_data)%in% chosen)%>%
ggplot(aes(x=mean,y=var))+geom_point(aes(color=color))+scale_color_manual(values = c("black","red"))+geom_function(color="dodgerblue",fun =fit.pbmc$trend ,size=1.5)+theme(legend.position = "none")#+scale_x_continuous(trans='log2')+scale_y_continuous(trans='log2')

t<-which(rownames(sce_data)%in% chosen[1:10])
td<-data.frame(mean=fit.pbmc$mean[t],var=fit.pbmc$var[t],symbol=rowData(sce_data)$Symbol[t])
plot2+ggrepel::geom_text_repel(data=td,aes(label=symbol))+ylab("Variance of log-expression")+xlab("Mean of log-expression")

```

## Dimension Reduction

### PCA

#### Seurat

```{r}
all.genes <- rownames(seurat_data)
seurat_data <- ScaleData(seurat_data, features = all.genes)
seurat_data <- RunPCA(seurat_data,
                      features = VariableFeatures(object = seurat_data),
                      verbose = F,npcs = 50)
DimPlot(seurat_data,reduction =  "pca",)
```

```{r}
ElbowPlot(seurat_data)
```

```{r}
stdev_pca_seurat<-seurat_data@reductions$pca@stdev 
findPC(sdev = stdev_pca_seurat,number = c(30,40,50),method = 'all',figure = T)

```

#### Bioconductor

```{r}
sce_data <- runPCA(sce_data,ncomponents = 50)
plotPCA(sce_data)
```

```{r}
stdev_pca_sce <- attr(reducedDim(sce_data, "PCA"),
  "varExplained") %>% sqrt()

plot(stdev_pca_sce)
```

```{r}
findPC(sdev = stdev_pca_sce,number = c(30,40,50),method = 'all',figure = T)
```

I choose 11 PC.

### TSNE

#### Seurat

```{r}
seurat_data <- RunTSNE(seurat_data, dims = 1:11,reduction = "pca")
DimPlot(seurat_data, reduction = "tsne")
```

```{r}
sce_data <- runTSNE(sce_data, dimred="PCA",n_dimred=11)
plotReducedDim(sce_data, dimred="TSNE")
```

```{r}
sce_data <- runTSNE(sce_data, dimred="PCA",n_dimred=11,perplexity=5)
plotReducedDim(sce_data, dimred="TSNE")
```

```{r}
sce_data <- runTSNE(sce_data, dimred="PCA",n_dimred=11,perplexity=20)
plotReducedDim(sce_data, dimred="TSNE")
```

```{r}
sce_data <- runTSNE(sce_data, dimred="PCA",n_dimred=11,perplexity=80)
plotReducedDim(sce_data, dimred="TSNE")
```

### UMAP

```{r}
seurat_data <- RunUMAP(seurat_data, dims = 1:11,reduction = "pca",verbose = F)
DimPlot(seurat_data, reduction = "umap")
```

```{r}
seurat_data <- RunUMAP(seurat_data, dims = 1:11,reduction = "pca",verbose = F,n.neighbors = 5)
DimPlot(seurat_data, reduction = "umap")
```

```{r}
seurat_data <- RunUMAP(seurat_data, dims = 1:11,reduction = "pca",verbose = F,n.neighbors = 50)
DimPlot(seurat_data, reduction = "umap")
```

```{r}
seurat_data <- RunUMAP(seurat_data, dims = 1:11,reduction = "pca",verbose = F,n.neighbors = 100)
DimPlot(seurat_data, reduction = "umap")
```

```{r}
sce_data <- runUMAP(sce_data, dimred="PCA",n_dimred=11)
plotReducedDim(sce_data, dimred="UMAP")
```
